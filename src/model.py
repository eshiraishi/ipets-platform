# generated by fastapi-codegen:
#   filename:  openapi.yml
#   timestamp: 2023-04-02T00:41:28+00:00

from __future__ import annotations

from typing import List, Literal, Optional
from bson import ObjectId

from pydantic import BaseModel, EmailStr, Field, SecretStr, constr

REGEX_OBJECT_ID: Literal = r"^[a-fA-F\d]{24}$"
REGEX_CNPJ: Literal = r"\d{14}"
REGEX_CPF: Literal = r"\d{11}"

TEMPLATE_404: Literal = "Documento inexistente para o id %s"


class PyObjectId(ObjectId):
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid objectid")
        return ObjectId(v)

    @classmethod
    def __modify_schema__(cls, field_schema):
        field_schema.update(type="string")


class UpdateRequestModel(BaseModel):
    consumerId: Optional[PyObjectId] = Field(
        None,
        # default_factory=PyObjectId,
        alias="_id",
        example="45cbc4a0e4123f6920000002",
    )
    serviceId: Optional[PyObjectId] = Field(
        None,
        # default_factory=PyObjectId,
        alias="_id",
        example="45cbc4a0e4123f6920000002",
    )
    date: Optional[str] = Field(None, example="1994-11-05T08:15:30-05:00")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class ProviderModel(BaseModel):
    id: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )
    cnpj: constr(regex=REGEX_CNPJ) = Field(example="31846757000124")
    name: str = Field(example="IPETS SERVICOS SA")
    email: EmailStr = Field(example="ariel.silva@ipets.com")
    address: Address
    bankAccount: BankAccount
    avatar: Optional[str] = Field(None, example="U3dhZ2dlciByb2Nrcw==")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class ConsumerModel(BaseModel):
    id: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )
    cpf: constr(regex=REGEX_CPF) = Field(example="98202023025")
    name: str = Field(example="Ariel Silva dos Santos")
    email: EmailStr = Field(example="ariel.silva@ipets.com")
    address: Address
    creditCard: CreditCard
    avatar: Optional[str] = Field(None, example="U3dhZ2dlciByb2Nrcw==")
    pets: List[Pet]

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class ServiceModel(BaseModel):
    id: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )
    name: str = Field(example="Tosa")
    description: Optional[str] = Field(
        None,
        example="Oferecemos servicos de tosa para cachorros de pequeno e medio porte.",
    )
    price: float = Field(example=89.9)
    providerId: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class RequestModel(BaseModel):
    id: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )
    consumerId: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )
    serviceId: PyObjectId = Field(
        default_factory=PyObjectId, alias="_id", example="45cbc4a0e4123f6920000002"
    )
    date: str = Field(example="1994-11-05T08:15:30-05:00")
    status: Optional[str] = Field(None, example="Rejeitado")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class ServiceListModel(BaseModel):
    data: List[ServiceModel]


class RequestListModel(BaseModel):
    data: List[RequestModel]


class Address(BaseModel):
    street: str = Field(example="Av. Paulista")
    number: str = Field(example="1001")
    complement: Optional[str] = Field(None, example="apto 21")
    city: str = Field(example="Sao Paulo")
    state: str = Field(example="SP")
    zip: str = Field(example="01311000")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class BankAccount(BaseModel):
    agency: str = Field(example="60883")
    accountNumber: str = Field(example="3413")
    digit: Optional[str] = Field(None, example="1")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class CreditCard(BaseModel):
    code: Optional[str] = Field(None, example="5118598797832798")
    name: Optional[str] = Field(None, example="ARIEL S DOS SANTOS")
    expirationDate: Optional[str] = Field(None, example="1994-11-05T08:15:30-05:00")
    verifyingDigits: Optional[str] = Field(None, example="183")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class Pet(BaseModel):
    name: str = Field(example="Scooby")
    species: str = Field(example="Cachorro")
    race: str = Field(example="Dogue Alemao")
    age: int = Field(example=5)
    description: str = Field(
        example='Possui pedigree e foi comprado do criador "Chacara dos Dogues Alemaes".'
    )

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class UpdateProviderModel(BaseModel):
    cnpj: Optional[constr(regex=REGEX_CNPJ)] = Field(None, example="31846757000124")
    name: Optional[str] = Field(None, example="IPETS SERVICOS SA")
    email: Optional[EmailStr] = Field(None, example="ariel.silva@ipets.com")
    password: Optional[SecretStr] = Field(None)
    address: Optional[Address] = Field(None)
    bankAccount: Optional[BankAccount] = Field(None)
    avatar: Optional[str] = Field(None, example="U3dhZ2dlciByb2Nrcw==")

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class UpdateConsumerModel(BaseModel):
    cpf: Optional[constr(regex=REGEX_CPF)] = Field(None, example="98202023025")
    name: Optional[str] = Field(None, example="Ariel Silva dos Santos")
    email: Optional[EmailStr] = Field(None, example="ariel.silva@ipets.com")
    password: Optional[SecretStr] = Field(None)
    address: Optional[Address] = Field(None)
    creditCard: Optional[CreditCard] = Field(None)
    avatar: Optional[str] = Field(None, example="U3dhZ2dlciByb2Nrcw==")
    pets: Optional[List[Pet]] = Field(None)

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}


class UpdateServiceModel(BaseModel):
    name: Optional[str] = Field(None, example="Tosa")
    description: Optional[str] = Field(
        None,
        example="Oferecemos servicos de tosa para cachorros de pequeno e medio porte.",
    )
    price: Optional[float] = Field(None, example=89.9)
    providerId: Optional[PyObjectId] = Field(
        None,
        # default_factory=PyObjectId,
        alias="_id",
        example="45cbc4a0e4123f6920000002",
    )

    class Config:
        allow_population_by_field_name = True
        arbitrary_types_allowed = True
        json_encoders = {ObjectId: str}
