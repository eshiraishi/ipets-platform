# generated by fastapi-codegen:
#   filename:  openapi.yml
#   timestamp: 2023-03-11T23:56:44+00:00

from __future__ import annotations

from typing import Union

from fastapi import FastAPI, Path

from .models import (
    Request,
    RequestData,
    RequestList,
    Service,
    ServiceData,
    ServiceList,
    User,
    UserData,
)

app = FastAPI(
    title='iPets',
    description='Especificacao dos contratos disponibilizados pelo servidor do aplicativo iPets, um\naplicativo para contratacao de servicos para pets.\nParte do projeto do grupo 21 na disciplina de Engenharia de Software, ministrada em\n2023.1 na UFABC.',
    version='0.1.0',
    servers=[{'url': 'http://localhost:8080/'}],
)


@app.put(
    '/requests',
    response_model=None,
    responses={'201': {'model': Request}},
    tags=['Pedidos'],
)
def create_request(body: RequestData) -> Union[None, Request]:
    """
    Cadastra os dados de um novo pedido na plataforma
    """
    pass


@app.get('/requests/{request_id}', response_model=Request, tags=['Pedidos'])
def get_request_by_id(request_id: str = Path(..., alias='requestId')) -> Request:
    """
    Obtem os dados de um pedido existente por ID na plataforma
    """
    pass


@app.patch('/requests/{request_id}', response_model=Request, tags=['Pedidos'])
def update_request_by_id(
    request_id: str = Path(..., alias='requestId'), body: RequestData = ...
) -> Request:
    """
    Atualiza os dados de um pedido existente por ID na plataforma
    """
    pass


@app.put(
    '/services',
    response_model=None,
    responses={'201': {'model': Service}},
    tags=['Servicos'],
)
def create_service(body: ServiceData) -> Union[None, Service]:
    """
    Cadastra os dados de um novo servico na plataforma
    """
    pass


@app.get('/services', response_model=ServiceList, tags=['Utilidades'])
def get_all_services() -> ServiceList:
    """
    Obtem todos os servicos existentes na plataforma
    """
    pass


@app.get('/services/{service_id}', response_model=Service, tags=['Servicos'])
def get_service_by_id(service_id: str = Path(..., alias='serviceId')) -> Service:
    """
    Obtem os dados de um servico existente por ID na plataforma
    """
    pass


@app.patch('/services/{service_id}', response_model=Service, tags=['Servicos'])
def update_service_by_id(
    service_id: str = Path(..., alias='serviceId'), body: ServiceData = ...
) -> Service:
    """
    Atualiza os dados de um servico existente por ID na plataforma
    """
    pass


@app.delete('/services/{service_id}', response_model=None, tags=['Servicos'])
def remove_service_by_id(service_id: str = Path(..., alias='serviceId')) -> None:
    """
    Remove os dados de um servico existente por ID na plataforma
    """
    pass


@app.get('/user/{user_id}/requests', response_model=RequestList, tags=['Utilidades'])
def get_requests_by_user_id(user_id: str = Path(..., alias='userId')) -> RequestList:
    """
    Obtem os dados de todos os pedidos de servicos feitos para um usuario existente por ID
    """
    pass


@app.put(
    '/users', response_model=None, responses={'201': {'model': User}}, tags=['Usuarios']
)
def create_user(body: UserData) -> Union[None, User]:
    """
    Cadastra os dados de um novo usuario na plataforma
    """
    pass


@app.get('/users/{user_id}', response_model=User, tags=['Usuarios'])
def get_user_by_id(user_id: str = Path(..., alias='userId')) -> User:
    """
    Obtem os dados de um usuario existente por ID na plataforma
    """
    pass


@app.patch('/users/{user_id}', response_model=User, tags=['Usuarios'])
def update_user_by_id(
    user_id: str = Path(..., alias='userId'), body: UserData = ...
) -> User:
    """
    Atualiza os dados de usuario existente por ID na plataforma
    """
    pass


@app.delete('/users/{user_id}', response_model=None, tags=['Usuarios'])
def remove_user_by_id(user_id: str = Path(..., alias='userId')) -> None:
    """
    Remove os dados de um usuario existente por ID na plataforma
    """
    pass
