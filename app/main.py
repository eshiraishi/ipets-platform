# generated by fastapi-codegen:
#   filename:  openapi.yml
#   timestamp: 2023-03-27T03:19:12+00:00

from __future__ import annotations

from typing import Union

from fastapi import FastAPI, Path

from .models import (
    Address,
    AddressData,
    BankAccount,
    BankAccountData,
    CreditCard,
    CreditCardData,
    ObjectId,
    Pet,
    PetData,
    Request,
    RequestData,
    RequestList,
    Service,
    ServiceData,
    ServiceList,
    UserConsumer,
    UserConsumerData,
    UserProvider,
    UserProviderData,
)

app = FastAPI(
    title='iPets',
    description='Especificacao dos contratos disponibilizados pelo servidor do aplicativo iPets, um\naplicativo para contratacao de servicos para pets.\nParte do projeto do grupo 21 na disciplina de Engenharia de Software, ministrada em\n2023.1 na UFABC.',
    version='0.1.0',
    servers=[{'url': 'http://localhost:8080/'}],
)


@app.put(
    '/addresses',
    response_model=None,
    responses={'201': {'model': Address}},
    tags=['Outros cadastros'],
)
def create_address(body: AddressData) -> Union[None, Address]:
    """
    Cadastra os dados de um novo endereco na plataforma
    """
    pass


@app.get('/addresses/{object_id}', response_model=Address, tags=['Outros cadastros'])
def get_address_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> Address:
    """
    Obtem os dados de um endereco existente por ID na plataforma
    """
    pass


@app.patch('/addresses/{object_id}', response_model=Address, tags=['Outros cadastros'])
def update_address_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: AddressData = ...
) -> Address:
    """
    Atualiza os dados de um endereco existente por ID na plataforma
    """
    pass


@app.delete('/addresses/{object_id}', response_model=None, tags=['Outros cadastros'])
def remove_address_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> None:
    """
    Remove os dados de um endereco existente por ID na plataforma
    """
    pass


@app.put(
    '/bankAccounts',
    response_model=None,
    responses={'201': {'model': BankAccount}},
    tags=['Outros cadastros'],
)
def create_bank_account(body: BankAccountData) -> Union[None, BankAccount]:
    """
    Cadastra os dados de um novo conta de banco na plataforma
    """
    pass


@app.get(
    '/bankAccounts/{object_id}', response_model=BankAccount, tags=['Outros cadastros']
)
def get_bank_account_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> BankAccount:
    """
    Obtem os dados de um conta de banco existente por ID na plataforma
    """
    pass


@app.patch(
    '/bankAccounts/{object_id}', response_model=BankAccount, tags=['Outros cadastros']
)
def update_bank_account_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: BankAccountData = ...
) -> BankAccount:
    """
    Atualiza os dados de um conta de banco existente por ID na plataforma
    """
    pass


@app.delete('/bankAccounts/{object_id}', response_model=None, tags=['Outros cadastros'])
def remove_bank_account_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> None:
    """
    Remove os dados de um conta de banco existente por ID na plataforma
    """
    pass


@app.put(
    '/creditCards',
    response_model=None,
    responses={'201': {'model': CreditCard}},
    tags=['Outros cadastros'],
)
def create_credit_card(body: CreditCardData) -> Union[None, CreditCard]:
    """
    Cadastra os dados de um novo cartao de credito na plataforma
    """
    pass


@app.get(
    '/creditCards/{object_id}', response_model=CreditCard, tags=['Outros cadastros']
)
def get_credit_card_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> CreditCard:
    """
    Obtem os dados de um cartao de credito existente por ID na plataforma
    """
    pass


@app.patch(
    '/creditCards/{object_id}', response_model=CreditCard, tags=['Outros cadastros']
)
def update_credit_card_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: CreditCardData = ...
) -> CreditCard:
    """
    Atualiza os dados de um cartao de credito existente por ID na plataforma
    """
    pass


@app.delete('/creditCards/{object_id}', response_model=None, tags=['Outros cadastros'])
def remove_credit_card_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> None:
    """
    Remove os dados de um cartao de credito existente por ID na plataforma
    """
    pass


@app.put(
    '/pets',
    response_model=None,
    responses={'201': {'model': Pet}},
    tags=['Outros cadastros'],
)
def create_pet(body: PetData) -> Union[None, Pet]:
    """
    Cadastra os dados de um novo pet na plataforma
    """
    pass


@app.get('/pets/{object_id}', response_model=Pet, tags=['Outros cadastros'])
def get_pet_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> Pet:
    """
    Obtem os dados de um pet existente por ID na plataforma
    """
    pass


@app.patch('/pets/{object_id}', response_model=Pet, tags=['Outros cadastros'])
def update_pet_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: PetData = ...
) -> Pet:
    """
    Atualiza os dados de pet existente por ID na plataforma
    """
    pass


@app.delete('/pets/{object_id}', response_model=None, tags=['Outros cadastros'])
def remove_pet_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> None:
    """
    Remove os dados de um pet existente por ID na plataforma
    """
    pass


@app.put(
    '/requests',
    response_model=None,
    responses={'201': {'model': Request}},
    tags=['Pedidos'],
)
def create_request(body: RequestData) -> Union[None, Request]:
    """
    Cadastra os dados de um novo pedido na plataforma
    """
    pass


@app.get('/requests/{object_id}', response_model=Request, tags=['Pedidos'])
def get_request_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> Request:
    """
    Obtem os dados de um pedido existente por ID na plataforma
    """
    pass


@app.patch('/requests/{object_id}', response_model=Request, tags=['Pedidos'])
def update_request_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: RequestData = ...
) -> Request:
    """
    Atualiza os dados de um pedido existente por ID na plataforma
    """
    pass


@app.put(
    '/services',
    response_model=None,
    responses={'201': {'model': Service}},
    tags=['Servicos'],
)
def create_service(body: ServiceData) -> Union[None, Service]:
    """
    Cadastra os dados de um novo servico na plataforma
    """
    pass


@app.get('/services', response_model=ServiceList, tags=['Utilidades'])
def get_all_services() -> ServiceList:
    """
    Obtem todos os servicos existentes na plataforma
    """
    pass


@app.get('/services/{object_id}', response_model=Service, tags=['Servicos'])
def get_service_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> Service:
    """
    Obtem os dados de um servico existente por ID na plataforma
    """
    pass


@app.patch('/services/{object_id}', response_model=Service, tags=['Servicos'])
def update_service_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: ServiceData = ...
) -> Service:
    """
    Atualiza os dados de um servico existente por ID na plataforma
    """
    pass


@app.delete('/services/{object_id}', response_model=None, tags=['Servicos'])
def remove_service_by_id(object_id: ObjectId = Path(..., alias='objectId')) -> None:
    """
    Remove os dados de um servico existente por ID na plataforma
    """
    pass


@app.get('/user/{object_id}/requests', response_model=RequestList, tags=['Utilidades'])
def get_requests_by_provider_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> RequestList:
    """
    Obtem os dados de todos os pedidos de servicos feitos para um usuario prestador existente por ID
    """
    pass


@app.put(
    '/users/consumers',
    response_model=None,
    responses={'201': {'model': UserConsumer}},
    tags=['Usuarios consumidores'],
)
def create_user_consumer(body: UserConsumerData) -> Union[None, UserConsumer]:
    """
    Cadastra os dados de um novo usuario consumidor na plataforma
    """
    pass


@app.get(
    '/users/consumers/{object_id}',
    response_model=UserConsumer,
    tags=['Usuarios consumidores'],
)
def get_user_consumer_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> UserConsumer:
    """
    Obtem os dados de um usuario consumidor existente por ID na plataforma
    """
    pass


@app.patch(
    '/users/consumers/{object_id}',
    response_model=UserConsumer,
    tags=['Usuarios consumidores'],
)
def update_user_consumer_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: UserConsumerData = ...
) -> UserConsumer:
    """
    Atualiza os dados de usuario consumidor existente por ID na plataforma
    """
    pass


@app.delete(
    '/users/consumers/{object_id}', response_model=None, tags=['Usuarios consumidores']
)
def remove_user_consumer_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> None:
    """
    Remove os dados de um usuario consumidor existente por ID na plataforma
    """
    pass


@app.put(
    '/users/providers',
    response_model=None,
    responses={'201': {'model': UserProvider}},
    tags=['Usuarios prestadores'],
)
def create_user_provider(body: UserProviderData) -> Union[None, UserProvider]:
    """
    Cadastra os dados de um novo usuario prestador na plataforma
    """
    pass


@app.get(
    '/users/providers/{object_id}',
    response_model=UserProvider,
    tags=['Usuarios prestadores'],
)
def get_user_provider_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> UserProvider:
    """
    Obtem os dados de um usuario prestador existente por ID na plataforma
    """
    pass


@app.patch(
    '/users/providers/{object_id}',
    response_model=UserProvider,
    tags=['Usuarios prestadores'],
)
def update_user_provider_by_id(
    object_id: ObjectId = Path(..., alias='objectId'), body: UserProviderData = ...
) -> UserProvider:
    """
    Atualiza os dados de usuario prestador existente por ID na plataforma
    """
    pass


@app.delete(
    '/users/providers/{object_id}', response_model=None, tags=['Usuarios prestadores']
)
def remove_user_provider_by_id(
    object_id: ObjectId = Path(..., alias='objectId')
) -> None:
    """
    Remove os dados de um usuario prestador existente por ID na plataforma
    """
    pass
