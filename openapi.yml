openapi: 3.0.3
info:
  title: iPets
  description: |-
    Especificacao dos contratos disponibilizados pelo servidor do aplicativo iPets, um
    aplicativo para contratacao de servicos para pets.
    Parte do projeto do grupo 21 na disciplina de Engenharia de Software, ministrada em
    2023.1 na UFABC.
  version: 0.1.0
servers:
  - url: http://localhost:8080/
tags:
  - name: Usuarios prestadores
    description: Usados na interface para gerir usuarios prestadores da plataforma.
  - name: Usuarios consumidores
    description: Usados na interface para gerir usuarios consumidores da plataforma.
  - name: Servicos
    description: Usados na interface de usuarios prestadores para gerir servicos na plataforma.
  - name: Pedidos
    description: Usados na interface de usuarios consumidores para gerir servicos na plataforma.
  - name: Outros cadastros
    description: Usados para cadastrar informações auxiliares aos usuarios, servicos e pedidos.
  - name: Utilidades
    description: Usados nas interfaces para utilidade ou para habilitar outras funcionalidades.
paths:
  /users/providers:
    put:
      tags:
        - Usuarios prestadores
      summary: Cadastra os dados de um novo usuario prestador na plataforma
      operationId: createUserProvider
      requestBody:
        description: Dados do usuario prestador a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProviderData"

      responses:
        "201":
          description: Usuario prestador criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProvider"
        "400":
          description: Usuario prestador requisitado possui dados invalidos
  /users/providers/{providerId}:
    get:
      tags:
        - Usuarios prestadores
      summary: Obtem os dados de um usuario prestador existente por ID na plataforma
      operationId: getUserProviderById
      parameters:
        - name: providerId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Usuario prestador obtido com sucesso para o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProvider"
        "404":
          description: Usuario prestador inexistente para o ID
    patch:
      tags:
        - Usuarios prestadores
      summary: Atualiza os dados de usuario prestador existente por ID na plataforma
      operationId: updateUserProviderById
      parameters:
        - name: providerId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      requestBody:
        description: Dados do usuario prestador a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProviderData"
      responses:
        "200":
          description: Usuario prestador obtido com sucesso para o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProvider"
        "404":
          description: Usuario prestador inexistente para o ID
    delete:
      tags:
        - Usuarios prestadores
      summary: Remove os dados de um usuario prestador existente por ID na plataforma
      operationId: removeUserProviderById
      parameters:
        - name: providerId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Usuario prestador removido com sucesso para o ID
        "404":
          description: Usuario prestador inexistente para o ID
  /users/consumers:
    put:
      tags:
        - Usuarios consumidores
      summary: Cadastra os dados de um novo usuario consumidor na plataforma
      operationId: createUserConsumer
      requestBody:
        description: Dados do usuario consumidor a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserConsumerData"

      responses:
        "201":
          description: Usuario consumidor criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserConsumer"
        "400":
          description: Usuario consumidor requisitado possui dados invalidos
  /users/consumers/{consumerId}:
    get:
      tags:
        - Usuarios consumidores
      summary: Obtem os dados de um usuario consumidor existente por ID na plataforma
      operationId: getUserConsumerById
      parameters:
        - name: consumerId
          in: path
          description: ID do usuario consumidor
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Usuario consumidor obtido com sucesso para o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserConsumer"
        "404":
          description: Usuario consumidor inexistente para o ID
    patch:
      tags:
        - Usuarios consumidores
      summary: Atualiza os dados de usuario consumidor existente por ID na plataforma
      operationId: updateUserConsumerById
      parameters:
        - name: consumerId
          in: path
          description: ID do usuario consumidor
          required: true
          schema:
            type: string
      requestBody:
        description: Dados do usuario consumidor a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserConsumerData"
      responses:
        "200":
          description: Usuario consumidor obtido com sucesso para o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserConsumer"
        "404":
          description: Usuario consumidor inexistente para o ID
    delete:
      tags:
        - Usuarios consumidores
      summary: Remove os dados de um usuario consumidor existente por ID na plataforma
      operationId: removeUserConsumerById
      parameters:
        - name: consumerId
          in: path
          description: ID do usuario consumidor
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Usuario consumidor removido com sucesso para o ID
        "404":
          description: Usuario consumidor inexistente para o ID
  /creditCards:
    put:
      tags:
        - Outros cadastros
      summary: Cadastra os dados de um novo cartao de credito na plataforma
      operationId: createCreditCard
      requestBody:
        description: Dado do cartao de credito a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditCardData"
      responses:
        "201":
          description: Cartao de credito criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditCard"
        "400":
          description: Cartao de credito requisitado possui dados invalidos
  /creditCards/{creditCardId}:
    get:
      tags:
        - Outros cadastros
      summary: Obtem os dados de um cartao de credito existente por ID na plataforma
      operationId: getCreditCardById
      parameters:
        - name: creditCardId
          in: path
          description: ID do cartao de credito
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do cartao de credito obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditCard"
        "404":
          description: Cartao de credito inexistente para o ID
    patch:
      tags:
        - Outros cadastros
      summary: Atualiza os dados de um cartao de credito existente por ID na plataforma
      operationId: updateCreditCardById
      parameters:
        - name: creditCardId
          in: path
          description: ID do cartao de credito
          required: true
          schema:
            type: string
      requestBody:
        description: Dado do cartao de credito a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreditCardData"
      responses:
        "200":
          description: Dados do cartao de credito atualizados com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreditCard"
        "404":
          description: Cartao de credito inexistente para o ID
    delete:
      tags:
        - Outros cadastros
      summary: Remove os dados de um cartao de credito existente por ID na plataforma
      operationId: removeCreditCardById
      parameters:
        - name: creditCardId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do cartao de credito removidos com sucesso
        "404":
          description: Cartao de credito inexistente para o ID
  /bankAccounts:
    put:
      tags:
        - Outros cadastros
      summary: Cadastra os dados de um novo conta de banco na plataforma
      operationId: createBankAccount
      requestBody:
        description: Dado do conta de banco a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccountData"
      responses:
        "201":
          description: Conta de banco criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
        "400":
          description: Conta de banco requisitado possui dados invalidos
  /bankAccounts/{bankAccountId}:
    get:
      tags:
        - Outros cadastros
      summary: Obtem os dados de um conta de banco existente por ID na plataforma
      operationId: getBankAccountById
      parameters:
        - name: bankAccountId
          in: path
          description: ID do conta de banco
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do conta de banco obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
        "404":
          description: Conta de banco inexistente para o ID
    patch:
      tags:
        - Outros cadastros
      summary: Atualiza os dados de um conta de banco existente por ID na plataforma
      operationId: updateBankAccountById
      parameters:
        - name: bankAccountId
          in: path
          description: ID do conta de banco
          required: true
          schema:
            type: string
      requestBody:
        description: Dado do conta de banco a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccountData"
      responses:
        "200":
          description: Dados do conta de banco atualizados com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
        "404":
          description: Conta de banco inexistente para o ID
    delete:
      tags:
        - Outros cadastros
      summary: Remove os dados de um conta de banco existente por ID na plataforma
      operationId: removeBankAccountById
      parameters:
        - name: bankAccountId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do conta de banco removidos com sucesso
        "404":
          description: Conta de banco inexistente para o ID
  /addresses:
    put:
      tags:
        - Outros cadastros
      summary: Cadastra os dados de um novo endereco na plataforma
      operationId: createAddress
      requestBody:
        description: Dado do endereco a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressData"
      responses:
        "201":
          description: Endereco criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: Endereco requisitado possui dados invalidos
  /addresses/{addressId}:
    get:
      tags:
        - Outros cadastros
      summary: Obtem os dados de um endereco existente por ID na plataforma
      operationId: getAddressById
      parameters:
        - name: addressId
          in: path
          description: ID do endereco
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do endereco obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "404":
          description: Endereco inexistente para o ID
    patch:
      tags:
        - Outros cadastros
      summary: Atualiza os dados de um endereco existente por ID na plataforma
      operationId: updateAddressById
      parameters:
        - name: addressId
          in: path
          description: ID do endereco
          required: true
          schema:
            type: string
      requestBody:
        description: Dado do endereco a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressData"
      responses:
        "200":
          description: Dados do endereco atualizados com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "404":
          description: Endereco inexistente para o ID
    delete:
      tags:
        - Outros cadastros
      summary: Remove os dados de um endereco existente por ID na plataforma
      operationId: removeAddressById
      parameters:
        - name: addressId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do endereco removidos com sucesso
        "404":
          description: Endereco inexistente para o ID
  /services:
    put:
      tags:
        - Servicos
      summary: Cadastra os dados de um novo servico na plataforma
      operationId: createService
      requestBody:
        description: Dado do servico a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceData"
      responses:
        "201":
          description: Servico criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "400":
          description: Servico requisitado possui dados invalidos
    get:
      tags:
        - Utilidades
      summary: Obtem todos os servicos existentes na plataforma
      operationId: getAllServices
      responses:
        "200":
          description: IDs obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceList"
  /services/{serviceId}:
    get:
      tags:
        - Servicos
      summary: Obtem os dados de um servico existente por ID na plataforma
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          description: ID do servico
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do servico obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          description: Servico inexistente para o ID
    patch:
      tags:
        - Servicos
      summary: Atualiza os dados de um servico existente por ID na plataforma
      operationId: updateServiceById
      parameters:
        - name: serviceId
          in: path
          description: ID do servico
          required: true
          schema:
            type: string
      requestBody:
        description: Dado do servico a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceData"
      responses:
        "200":
          description: Dados do servico atualizados com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          description: Servico inexistente para o ID
    delete:
      tags:
        - Servicos
      summary: Remove os dados de um servico existente por ID na plataforma
      operationId: removeServiceById
      parameters:
        - name: serviceId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do servico removidos com sucesso
        "404":
          description: Servico inexistente para o ID
  /requests:
    put:
      tags:
        - Pedidos
      summary: Cadastra os dados de um novo pedido na plataforma
      operationId: createRequest
      requestBody:
        description: Dado do pedido a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestData"
      responses:
        "201":
          description: Pedido criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "400":
          description: Pedido requisitado possui dados invalidos
  /requests/{requestId}:
    get:
      tags:
        - Pedidos
      summary: Obtem os dados de um pedido existente por ID na plataforma
      parameters:
        - name: requestId
          in: path
          description: ID do pedido
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do pedido obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "404":
          description: Pedido inexistente para o ID
      operationId: getRequestById
    patch:
      tags:
        - Pedidos
      summary: Atualiza os dados de um pedido existente por ID na plataforma
      parameters:
        - name: requestId
          in: path
          description: ID do pedido
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Dados do pedido atualizados com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Request"
        "404":
          description: Pedido inexistente para o ID
      requestBody:
        description: Dado do pedido a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestData"
      operationId: updateRequestById
  /user/{providerId}/requests:
    get:
      tags:
        - Utilidades
      summary: Obtem os dados de todos os pedidos de servicos feitos para um usuario prestador existente por ID
      parameters:
        - name: providerId
          in: path
          description: ID do usuario prestador
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pedidos obtidos com sucesso para o ID do usuario prestador
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestList"
        "404":
          description: Usuario prestador invalido para o ID
      operationId: getRequestsByProviderId
  /pets:
    put:
      tags:
        - Outros cadastros
      summary: Cadastra os dados de um novo pet na plataforma
      operationId: createPet
      requestBody:
        description: Dados do pet a ser cadastrado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetData"
      responses:
        "201":
          description: Pet criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Pet requisitado possui dados invalidos
  /pets/{petId}:
    get:
      tags:
        - Outros cadastros
      summary: Obtem os dados de um pet existente por ID na plataforma
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID do pet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pet obtido com sucesso para o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: Pet inexistente para o ID
    patch:
      tags:
        - Outros cadastros
      summary: Atualiza os dados de pet existente por ID na plataforma
      operationId: updatePetById
      parameters:
        - name: petId
          in: path
          description: ID do pet
          required: true
          schema:
            type: string
      requestBody:
        description: Dados do pet a ser atualizado
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetData"
      responses:
        "200":
          description: Pet obtido com sucesso para o ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "404":
          description: Pet inexistente para o ID
    delete:
      tags:
        - Outros cadastros
      summary: Remove os dados de um pet existente por ID na plataforma
      operationId: removePetById
      parameters:
        - name: petId
          in: path
          description: ID do pet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pet removido com sucesso para o ID
        "404":
          description: Pet inexistente para o ID
components:
  schemas:
    UserProvider:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        cnpj:
          description: CNPJ
          type: string
          example: "19303761000140"
        name:
          type: string
          example: "IPETS SERVICOS SA"
        email:
          type: string
          format: email
          example: ariel.silva@ipets.com
        # password:
        #   type: string
        #   format: password
        address:
          $ref: "#/components/schemas/Address"
        bankAccount:
          $ref: "#/components/schemas/BankAccount"
        # creditCards:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/CreditCard"
        avatar:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        # pets:
        #   type: array
        #   items:
        #     type: string
        #     format: uuid
      required:
        - "id"
        - "name"
        - "code"
        - "email"
        - "address"
        - "bankAccount"
    UserConsumer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        cpf:
          description: CPF
          type: string
          example: "98202023025"
        name:
          type: string
          example: Ariel Silva dos Santos
        email:
          type: string
          format: email
          example: ariel.silva@ipets.com
        # password:
        #   type: string
        #   format: password
        address:
          $ref: "#/components/schemas/Address"
        # bankAccount:
        #   $ref: "#/components/schemas/BankAccount"
        creditCard:
          $ref: "#/components/schemas/CreditCard"
        avatar:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        pets:
          type: array
          items:
            type: string
            format: uuid
      required:
        - "id"
        - "name"
        - "email"
        - "address"
        - "creditCard"
        - "pets"
    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        street:
          type: string
          example: Av. Paulista
        number:
          type: string
          example: "1001"
        complement:
          type: string
          example: apto 21
        city:
          type: string
          example: Sao Paulo
        state:
          type: string
          example: SP
        zip:
          type: string
          example: "01311000"
      required:
        - "id"
        - "street"
        - "number"
        - "city"
        - "state"
        - "zip"
    BankAccount:
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        agency:
          type: string
          example: "60883"
        accountNumber:
          type: string
          example: "3413"
        digit:
          type: string
          example: "1"
      required:
        - "id"
        - "agency"
        - "accountNumber"
        - "digits"
    CreditCard:
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        code:
          type: string
          example: "5118598797832798"
        name:
          type: string
          example: "ARIEL S DOS SANTOS"
        expirationDate:
          type: string
          format: datetime
          example: "1994-11-05T08:15:30-05:00"
        verifyingDigits:
          type: string
          example: "183"
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        serviceType:
          type: string
          example: Tosa
        price:
          type: number
          format: double
          example: 89.90
        providerId:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
      required:
        - "id"
        - "serviceType"
        - "price"
        - "providerId"
    Request:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        consumerId:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        serviceId:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        date:
          type: string
          format: datetime
          example: "1994-11-05T08:15:30-05:00"
        status:
          type: string
          example: Rejeitado
      required:
        - "id"
        - "consumerId"
        - "serviceId"
        - "date"
    Pet:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        name:
          type: string
          example: "Scooby"
        species:
          type: string
          example: "Cachorro"
        race:
          type: string
          example: Dogue Alemao
        age:
          type: integer
          example: 5
        description:
          type: string
          example: Possui pedigree e foi comprado do criador "Chacara dos Dogues Alemaes".
      required:
        - "id"
        - "name"
        - "species"
        - "race"
        - "age"
        - "description"
    ServiceList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Service"
    RequestList:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Request"
    ServiceData:
      type: object
      properties:
        serviceType:
          type: string
          example: Tosa
        price:
          type: number
          format: double
          example: 89.90
        providerId:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
      required:
        - "serviceType"
        - "price"
        - "providerId"
    RequestData:
      type: object
      properties:
        consumerId:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        serviceId:
          type: string
          format: uuid
          example: 9cd94d37-3b45-4d66-a4ac-1ee904a87491
        date:
          type: string
          format: datetime
          example: "1994-11-05T08:15:30-05:00"
      required:
        - "id"
        - "consumerId"
        - "serviceId"
        - "date"
    UserProviderData:
      type: object
      properties:
        cnpj:
          description: CNPJ
          type: string
          example: "19303761000140"
        name:
          type: string
          example: "IPETS SERVICOS SA"
        email:
          type: string
          format: email
          example: ariel.silva@ipets.com
        password:
          type: string
          format: password
        address:
          $ref: "#/components/schemas/Address"
        bankAccount:
          $ref: "#/components/schemas/BankAccount"
        avatar:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
      required:
        - "cnpj"
        - "name"
        - "email"
        - "address"
        - "bankAccount"
    UserConsumerData:
      type: object
      properties:
        cpf:
          description: CPF
          type: string
          example: "98202023025"
        name:
          type: string
          example: Ariel Silva dos Santos
        email:
          type: string
          format: email
          example: ariel.silva@ipets.com
        password:
          type: string
          format: password
        address:
          $ref: "#/components/schemas/Address"
        creditCard:
          $ref: "#/components/schemas/CreditCard"
        avatar:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        pets:
          type: array
          items:
            type: string
            format: uuid
      required:
        - "cpf"
        - "name"
        - "email"
        - "password"
        - "address"
        - "creditCard"
        - "pets"
    CreditCardData:
      type: object
      properties:
        code:
          type: string
          example: "5118598797832798"
        name:
          type: string
          example: "ARIEL S DOS SANTOS"
        expirationDate:
          type: string
          format: datetime
          example: "1994-11-05T08:15:30-05:00"
        verifyingDigits:
          type: string
          example: "183"
      required:
        - "code"
        - "name"
        - "expirationDate"
        - "verifyingDigits"
    BankAccountData:
      properties:
        agency:
          type: string
          example: "60883"
        accountNumber:
          type: string
          example: "3413"
        digit:
          type: string
          example: "1"
      required:
        - "agency"
        - "accountNumber"
        - "digits"
    AddressData:
      type: object
      properties:
        street:
          type: string
          example: Av. Paulista
        number:
          type: string
          example: "1001"
        complement:
          type: string
          example: apto 21
        city:
          type: string
          example: Sao Paulo
        state:
          type: string
          example: SP
        zip:
          type: string
          example: "01311000"
      required:
        - "street"
        - "number"
        - "city"
        - "state"
        - "zip"
    PetData:
      type: object
      properties:
        name:
          type: string
          example: "Scooby"
        species:
          type: string
          example: "Cachorro"
        race:
          type: string
          example: Dogue Alemao
        age:
          type: integer
          example: 5
        description:
          type: string
          example: Possui pedigree e foi comprado do criador "Chacara dos Dogues Alemaes".
      required:
        - "name"
        - "species"
        - "age"
